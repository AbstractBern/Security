#!/bin/bash
# @author : Bernardo Flores
# @Date: 07/15/2023
# 
# Desc. Program to automate analysis of Vuln. 204392 in RHEL7 STIG Checklist
# try running this as root because you will probably get errors ls -al specific directories without privilege
# command to output vendor values as from the command from V-204392
# output is sent to a file for reading. The file is later deleted.
echo "Sending vendor values to vendor_values.txt";
for i in `rpm -Va | grep -E '^.{1}M|^.{5}U|^.{6}G'| cut -d " " -f 4,5`;do for j in `rpm -qf $i`;do rpm -ql $j --dump | cut -d " " -f 1,5,6,7 | grep $i;done;done > vendor_values.txt

# c - actual, v - vendor
# vendor values are in vendor_values.txt.
# variables for vendor values
v_file_name=""
v_permission=""
v_owner=""
v_group=""

# switches
permission_passed=-1
group_passed=-1
owner_passed=-1
owner_status=-1
group_status=-1
file_exists=-1
permission_status=-1
# values for current values
c_owner=""
c_group=""
ownership=""
groupship=""
permissive=""
# ---------------------------------------------------------------
# check_permission takes 2 paramters currentPerm and defaultPerm to verify if they are more or less permissive.
check_permission (){
	permissive='0';
	cp1=$(echo "$c_permission" | awk '{print substr($1,1,1)}')	
	cp2=$(echo "$c_permission" | awk '{print substr($1,2,1)}')
	cp3=$(echo "$c_permission" | awk '{print substr($1,3,1)}')
	vp1=$(echo "$v_permission" | awk '{print substr($1,1,1)}')
	vp2=$(echo "$v_permission" | awk '{print substr($1,2,1)}')
	vp3=$(echo "$v_permission" | awk '{print substr($1,3,1)}')
	if [[ $cp1 > $vp1 || $cp2 > $vp2 || $cp3 > $vp3 ]]; then
		permissive='1';
	else
		permsissive='0';
	fi
	echo $permissive
}
# check whether default vendor values are the same for the ownership permission of file path
check_owner () {
	if [[ $c_owner == $v_owner ]]; then
		ownership='0';
	elif [[ $c_owner != $v_owner ]]; then
		# do not match
		ownership='1';
	fi
	echo $ownership
}
# check whether defaul vendor values are the same for the group permissions of the file path
check_group () {
	if [[ $c_group != $v_group ]]; then
		# vendor value do not equal actual group
		groupship='1';
	elif [[ $c_group == $v_group ]]; then
		groupship='0'
	fi
	echo $groupship
}

echo "###################################s###########################"
echo "		1). EACH FILE MUST NOT BE MORE PERMISSIVE THAN THE DEFAULT VENDOR VALUES
		2). OWNERSHIP AND GROUP ACCOUNTS MUST BE THE SAME AS THE DEFAULT VENDOR VALUES FOR EACH FILE"
echo "##############################################################"
while read line; do
	v_file_name=$(echo "$line" | awk '{print $1}')
	echo "----------------------------------";
	printf "%20s" "STATUS: ";
	if [ -f "$v_file_name" ]; then
		file_exists='1'
		v_permission=$(echo "$line" | awk '{print $2}')
		v_permission=$(echo -n "$v_permission" | tail -c 3)
		
		v_owner=$(echo "$line" | awk '{print $3}')
		v_group=$(echo "$line" | awk '{print $4}')

		c_owner=$(ls -al $v_file_name | awk '{print $3}')
		c_group=$(ls -al $v_file_name | awk '{print $4}')
		
		c_permission=$(stat -c "%a" $v_file_name)
		c_permission=$(echo -n "$c_permission" | tail -c 3)
		
		# Compare file permissions here because awk is not useful for that
		# verify file permissions are not more permissive than originally intended
		permission_status="$(check_permission)"
		

		# verify user is as the original vendor vales
		owner_status="$(check_owner)"
		
		# verify group is as the original vendor values
		group_status="$(check_group)"
	else
		file_exists='0';
	fi
	if [[ $permission_status == 0 && $owner_status == 0 && $group_status == 0 ]]; then
		echo -n -e "PASSED - $v_file_name passes the control.\n"
		printf "%-20s %-20s %-20s %10s %10s\n" "DEF/ACT" "File" "Permission" "Owner" "Group";
		printf "%-20s %-20s %-20s %10s %10s\n" "DEFAULT" "$v_file_name" "$v_permission" "$v_owner" "$v_group";
		printf "%-20s %-20s %-20s %10s %10s\n" "ACTUAL" "$v_file_name" "$c_permission" "$c_owner" "$c_group";
	elif [[ $file_exists == '0' ]]; then
		echo -n "FAILED - $v_file_name does not exist.";
	else
		echo -n "FAILED ("
		# dont confuse this: 1 is failure, 0 is success in the functions above
		if [[ $permission_status -eq '1' ]]; then
			echo -n "Permission. ";
		fi
		if [[ $owner_status -eq '1' ]]; then
			echo -n "Ownership. ";
		fi
		if [[ $group_status -eq '1' ]]; then
			echo -n "Group. ";
		fi
		echo  ") - $v_file_name"
		printf "%-20s %-20s %-20s %10s %10s\n" "DEF/ACT" "File" "Permission" "Owner" "Group";
		printf "%-20s %-20s %-20s %10s %10s\n" "DEFAULT" "$v_file_name" "$v_permission" "$v_owner" "$v_group";
		printf "%-20s %-20s %-20s %10s %10s\n" "ACTUAL" "$v_file_name" "$c_permission" "$c_owner" "$c_group";
	fi
	echo -e "\n----------------------------------";
done < vendor_values.txt
echo "Deleting vendor_values.txt";
sudo rm vendor_values.txt
